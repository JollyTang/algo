2025-08-11 10:54:49 会议已开启实时转写，机器识别结果仅供参考 
。。。 2025-08-11 11:00:10 
您好，可以听到，然后你要不直接考一下你的那个简历吧，投我的简历。 
。。。 2025-08-11 11:00:25 
我看看怎么投一下，到时候我的简历。 
。。。 2025-08-11 11:01:12 
Thank you. 可以可以可以看到吗？这个地方。 
。。。 2025-08-11 11:01:20 
可以可以唉，我想一下为什么？哪个哪个地？ 
。。。 2025-08-11 11:01:48 
可以看到吗？可以面试管理好，那我先做个简单的自我介绍，你简单自我介绍一下吧，好的，面试官你好，然后我是我叫谭琪，是中国科学技术大学软件学院研二的学生，然后马上升研三。 
。。。 2025-08-11 11:02:13 
然后的话在学校学习的一个课程呢，主要有那个高级软件工程，然后人工智能还有那些数据挖掘等课程，然后平常的话就业余生活的话，就平常的技术站的话接触的是 java 然后 python 还有 go 这一些语言。 
。。。 2025-08-11 11:02:28 
然后也做过一些项目进行猎手，然后目前的话是在美团这边履约平台技术部口令平台进行暑期实习。以上就是一个简单的自我介绍，谢谢！ 
。。。 2025-08-11 11:02:42 
ok 行，然后下面的话就是过一下你那个试衣间试试衣间立法这一问题简单说一下吧，好，我我能看到这个数吗？就是我整理了一份。 
。。。 2025-08-11 11:02:55 
这是我整理的，我在美团和腾讯的两段实习中，我干的一些事情。我先讲最近的这一个美团的这几个月的一些工作，首先这边的话，其实对一开始我刚来的时候是去做这个在线工作流相关的一些工作，这个的话它其实就相当于美团内部的一个扣子的这样一个。 
。。。 2025-08-11 11:03:16 
平台的一个开发，然后就是用户可以在上面拖拽来一些节点，然后组成一些工作流，然后进行调用。然后呢它有很多的组件，比如说开始组件，结束组件，然后大模型组件，然后分支组件，意图识别知识库之类的各种组件，然后通通过用户就可以拖拽工作流来来完成他们的需求。 
。。。 2025-08-11 11:03:36 
然后这边的话，我做的第一个需求的话就是那个，因为我们的那个工作流的话，它一开始是一个扁平化的设计，它其实就是所有的变量名呢，它并没有一个组件的一个概念。所以说如果你在一个工作流的上下游，同时使用了相同的那个名称。 
。。。 2025-08-11 11:03:53 
它就会进行覆盖掉，然后这边的话就由于为了支持它的那个组件力度，选择它的那个变量，然后提升它的一些灵活性和可维护性，然后就需要对它进行一些更改，然后就是。 
。。。 2025-08-11 11:04:08 
在介绍我去提问的可以不用介绍这么详细，不然可能事情不太用好的好的，然后这边的话主要就是通过在它内部进行变量的前缀来实现它的那个进行变量的区分，然后修改所有的组件中涉及到这一块的变量的。 
。。。 2025-08-11 11:04:27 
设置，然后来完成这个需求，这是我在这边做的第一个工作，就是在线工作有相关的，然后之后这个这个做完之后我就去做那个标注相关的，也就是标数据集的一个标注系统的这一块的一些工作，然后这一块基本上是从零到一开始搭建的。 
。。。 2025-08-11 11:04:43 
然后这边的话就是因为它整个从工作流的话是在工作流中会产生很多数据，然后这些数据呢也可以直接导入到我们的那个数据集中。然后呢，由于我们这边它是整个数数据链路的一个整个模块的一个搭建，它需要从上游的数据导入，然后再到评测从标注的一个过程，然后标注完之后呢，就可以对这个数据进行评测，然后来。 
。。。 2025-08-11 11:05:10 
根据评测的结果来知道我们这一个工作流或者是我们的 agent 的效果的好与坏，然后通过这个来进行优化迭代我们的那个弹模型。然后所以说这个是我刚才说他这边是从零到一开始搭建的，然后他一开始就是数据及管理模块。 
。。。 2025-08-11 11:05:26 
那就包含了一些数据集的一些基本操作，就导入预览，删除，修改这些操作，然后它有一些不同的模块设计，比如说它分了三个层级，就是数据及力度，还有那个。 
。。。 2025-08-11 11:05:38 
操作力度还有一个就是具体的每一行的一些顺序，然后这这这边的话就是通过这些来进行区分，然后有一个不同的血缘关系，然后通过它那个可以做到不同数据不同版本之间的隔离，这是数据集相关的，然后就是标注系统相关的就是打标，就是用户可以去创建一个标注任务，针对某一个数据集进行一个标注任务，然后标注任务的话可以。 
。。。 2025-08-11 11:06:01 
选择不同的类型，就比如说一个平铺或者是对话，或者是那个 JSP 标注，就是对比标注，然后根据不同的标注任务来进行创建，然后之后就是用户就可以进行达标，达标之后呢，就会产生各种结果，然后之后就可以导导入到我们的下一个模块就是。 
。。。 2025-08-11 11:06:21 
评测模块，然后这边的话就是我做了现在的最最近时间做了一个巡检模块，就是定时的去那个进行任务巡检来判断自己的那个数据集的迭代和大模型的迭代的一个情况来判断效果好与坏，然后来进行后续的指导开发。 
。。。 2025-08-11 11:06:39 
然后其实大概主要是做了这方面，然后这个离线工作流的话是稍微接触了一点，就是解决了一下它的那个 spark 环境隔离的一些问题，因为我们这边 spark 只有那个正式环境，然后它没有测试环境。 
。。。 2025-08-11 11:06:53 
但是呢，用户是有从设置环境导数据的一个需求，然后是目前之前的话是支持不了的，然后就是我通过那个首先在管理端新增一个那个导入数据的接口，然后它在 sp 中节点进行调用，然后进行通过环境的判断来进行导入的，然后也选择了那个影响最小的一个修改方式，这样不不，不，会产生特别多的错误。 
。。。 2025-08-11 11:07:18 
然后其实的话，感觉这一块还是有很多可以优化的地方，因为当时是比较急，所以说直接放在那个 java 来进行聚合，但是我随着后续对 spark 的一些学习了解，感觉它是完全可以把它那个数据的导入就发请求的那个阶段放在那个中，这样的话它能够提升一个并发的效率。 
。。。 2025-08-11 11:07:36 
然后应该应该是相对于之前来说效率也是会更高的，然后导出的数据量呢也会更多，这是这是在美团这边做的主要的几个工作内容。 
。。。 2025-08-11 11:07:49 
那我们就不提问一些问题了，好吧。好。 ok ok 第一块呢，就是在那个数据标系统之类的。然后你这里实现了这个就是这个 mod，对吧。然后你这几个 mod 在实现的时候是怎么根据这个系统来保持一定的。 
。。。 2025-08-11 11:08:08 
就是那些那些什么性的，这边的话就是通过抽抽象来进行我完成的，因为因为因为最开始我刚过来的时候，它只有一个那个评估模式。 
。。。 2025-08-11 11:08:19 
评估模式的话，就是最简单的就是我可能一个 excel，然后一条数据呢就是一个标注页面，然后就标一条，就到下一条，一条就像下一条。然后之后的话，我们就是由于业务方那边有需求，就是包括现在像 AI 越来越火，它可能标注的形式就变成标注整个绘画，它要判断大模型在整个绘画中哪些地方回答的好，哪些地方回答的不好，然后哪一些就可能要通过这些来进行后续的他们做针对性的训练，所以说他有有了这么一个需求。 
。。。 2025-08-11 11:08:45 
然后就我们通过对它那个标注形式进行抽象，然后就把一些公共的部分给抽象出来，然后就抽成一个子类，然后剩下的就是不同的，不同的那个标注形式就进行各自的实现，就能够达到那个高内聚集耦合的一个效果，然后就是大部分抽象。 
。。。 2025-08-11 11:09:05 
就是这里除了除了除了抽象之外的话，你这会是怎么跟整个系统做一个整合的呢？跟跟系统是指上下游的那些系统吗？ 
。。。 2025-08-11 11:09:16 
你你这个你这几个模式的话，肯定是根据一定的情况，然后做一些选择，然后再跟整个系统结合，就这块整个集合能不能简单讲讲吗？ 
。。。 2025-08-11 11:09:27 
因为他就我就说他那个对，就是创建标注任务的这个界面吧，因为我们的创建的话，它是可以用，就是那个选择不同的标注形形态就是最基础的评估，然后还有一个对话，然后还有一个就是 GSP 它在。 
。。。 2025-08-11 11:09:44 
用户在创建的时候就可以选择出来的这个，然后就通过一个枚举类，然后就是在创建接口的时候就通过这个来判断它走的是哪一个任务，然后就是可以有一个工厂模式，然后就是 handler 然后根据它的那个 type 来获得它的那个对应的处理方式。 
。。。 2025-08-11 11:10:00 
然后然后就是这样，就把它完全解剖开了，然后中间又有一些就是刚刚说的一些相似部分的抽象，还有一些单独，那具体的一些实现就就完成了。结果说平台这块先收集信息，然后用户去选择一些能力，然后底层的话通过能力进行一个媒体，然后。 
。。。 2025-08-11 11:10:24 
都是工厂对对对。 
。。。 2025-08-11 11:10:33 
ok 行，然后然后下面一个的话就是你有提到就是你在存就是存储存优化，这里做了一些工作，然后我用到了比，比如说 H base 的二级所有系统。ok 这里我说一下就是有有有的有的。 
。。。 2025-08-11 11:10:51 
那个手机上有了解吗？这边这边一开始的话就是最基础的就是搜 HB 的一些 API，然后进行查询，然后的话就是比较因为 API 很多，然后然后就是选择一些比较合适的进行进行复用。然后的话由于我们。 
。。。 2025-08-11 11:11:10 
又这几天就好像就是你这边好像是这还是直接去了解它的 API ，就是对于它已有的这种系统的实现，你有了解吗？就是就是底层的那个那个。 
。。。 2025-08-11 11:11:22 
对他内部的一些过程，对那那那一块没有，没有特别多的了解， ok 行那 ok 那那那那第二个问题就是你是提到二级所有，那你这是怎么实现的？ 
。。。 2025-08-11 11:11:33 
二级索引其实就是为了适配我们的一个那个筛选力度的一个标注任务来实现的，因为假如说用户在达标的时候，他会看到它的第一个标注数据，然后呢，对于平铺的来说的话，它的那个第一个标注数据其实就是它导入的第一条数据。 
。。。 2025-08-11 11:11:49 
但如果是对于绘画来说的话，它的第一个看到的数据其实是11片数据，然后呢，它其实就是相当于在那个普通的标注任务外面又抽象出来一层，这是从我们业务层进行抽象的，然后就是它的。 
。。。 2025-08-11 11:12:04 
用户的标注的第一个 session 会转化到它的第一个 session 对应的 H base id list 的，因为它标注的是有多个对话，他可能看到了有五个，那它标注的就是这五个，它会对五个中的其中的一个进行。 
。。。 2025-08-11 11:12:19 
标注达标，然后就比如说评判他回答的好或不好，然后的话就是通过新新增以及索引，然后就是它可以通过就是我们抽象出来的接口之后，它就是需要传它的当前的标注的 index 来获取它的一个所有的 H base id，然后后续的话就直接操作一些 H base id 就行了，就是把那些。 
。。。 2025-08-11 11:12:40 
繁琐的操作封装了一层对，请问一下，就是你这里是额外增加了一张 HB 的表吗？来来存储这个意识关系还是怎么样，并并并没有额外，只是在业务层面进行封装对。 
。。。 2025-08-11 11:12:56 
ok 刚刚听上去都是你的业务逻辑，就是你这个二级索引的话，相当于是没有用到一些额外的这种，比如说结束结构或者存储是吧？对，因为我们存储层面是统一的，它导入的数据其实格式都是基本上是一模一样的。 
。。。 2025-08-11 11:13:12 
就是一条数据，一条数据的，所以涉及到题就是说我们的简单的业务层做了一个服装，对吧，对。Keep on it.  
。。。 2025-08-11 11:13:30 
ok 然后下面就是工作流这一块的话，就是你这里有提到，就是有去解决环境的数据隔离问题，我这个简单一点就是你这个数据和理解决大概是一个什么事？ 
。。。 2025-08-11 11:13:44 
因为因为他之前的话，它是因为我们 spark 只有正式环境，然后呢，它导入的话，用户只能从正式环境的工作流中的产生的数据。然后呢，通过 spark 环境给导入到它的正式环境的 H base 中。 
。。。 2025-08-11 11:13:59 
然后呢，有些用户他可能就是他比较超前，他比较喜欢在 test 的环境进行操作，然后呢，他就从 test 的环境的工作流，把数据给导到 test 环境的 H base 中的这么一个需求。然后由于 spark 的没有这个 test 环境，所以说他就。 
。。。 2025-08-11 11:14:15 
我们是都共用的正式环境的那个环境，所以说它需要解决这么个一个冲突。所以说就在 spark 那个组件中新增了一个环境判断，然后通过环境判断了完成他对那个 test 的环境的一些数据导入的一些请求。 
。。。 2025-08-11 11:14:31 
然后然后当时是这么来做的，然后当时是就是因为比较急，他就当时直接我就直接把它放在 driver 节点进行数据聚合，然后就是发那个请求往管理端发请求，把数据进行导入就就解决了。然后当时但是我后来后来思考一下，应该是可以把这个阶段给放到那个。 
。。。 2025-08-11 11:14:51 
它有一个并发的来导入的数据，这样一个流程，这样的话效率应该会更快，然后导入的数据量也会更多。当然这就需要考虑我们那个管理端能否扛扛起这个高并发，还有一些序列化 HTTP 开的序列化的一些细节的一些问题可能也需要关注到。 
。。。 2025-08-11 11:15:10 
然后数据数据倾斜，我们可能要做一些分区的一些逻辑，那设计后期是可以优化的，对这个听上去的话就是首先你们来解决一个就是管理合理的问题会在。 
。。。 2025-08-11 11:15:25 
就在这个方案，然后用一个触发任务去做数据处理，然后调一些，然后把数据写到那个一些，比如说真实的环境里面去写写写，也是写到测试的环境中。 
。。。 2025-08-11 11:15:37 
把你的优化优化优化手段，那就相当于之前说我都在这里面，然后后面就是后续准备把它放到 SU 那里，对吧，对，这就是我自己考虑的一个优化。 
。。。 2025-08-11 11:15:55 
然后第一个第一个实习项目应该了解差不多了，然后一会简单加第二个项目吧，就是腾讯时间这里简单简单说，腾讯这边的话是主要是做那个监控系统相关的一些工作，然后这个这边的话大概涉及到三个服务，一个是监控管理端的一个服务，然后一个是数据统计的服务，然后另外一个是监控告警的服务。 
。。。 2025-08-11 11:16:17 
然后这个工单 AI 分析是我自己抽空搭的一个一个小小项目，然后这个大数据这个处理是一个单独的一个任务，不算是一个工程。 
。。。 2025-08-11 11:16:29 
然后主要是先讲管理端吧，管理端的话就是我们是一个那个通用服务中通用服务平台，然后的话就是会有很多提供通用的服务，比如说像数据的排行榜或者是道具的分发各种的一些通用服务，然后所有的工作室呢，都来用我们的那个通用。 
。。。 2025-08-11 11:16:47 
然后的话由于业务方对接比较多，然后也需要一个监控系统来管理我们的服务的一些正确率，或者是一些运行情况，然后的话这是我主要负责的，有这边基本上管理单的所有模块我都接触过，就是首先就是它有，首先就是一个。 
。。。 2025-08-11 11:17:07 
查询的一个模块就是链链链链路统计链调用详情节点视图都是，就是可以查询这些各种信息来看它的那个活动，或者是某一条链路的运行情况，它的正确率成功率是多少，或者是有一些超时是多少。 
。。。 2025-08-11 11:17:24 
然后的话，你还有一些数据接入的一些情况，就是它可以在我们平台注册一个 APP ID，然后它也可以再细化到一些模块，或者是一个接口，然后它都会产生一个 ID，然后后续的话，它可以根据这些 ID 来查他那个这个链路的一些调用。 
。。。 2025-08-11 11:17:39 
然后还有就是监控相关的就是告警那一块，它可以在我们的那个管理端进行配置，它，它，它的一条链路，它可以进行配置，它那个请求量达到多少，小于多少，或者是抖抖抖降这些，如果有这种情况的话，就会产生告警。 
。。。 2025-08-11 11:17:57 
出现这种情况，就会给他的邮箱或者是企业微信发消息通知，然后产生一个工单，然后他就可以去去这个，这个就跟这个平常的到点差不多。 
。。。 2025-08-11 11:18:09 
大概这就是管理员做的一些事情，然后数据统计的话，就是由于我们那个上层业务查询是分多很多个维度的，它可以通过活动查，通过时间范围查，然后通过列入查，通过主调查被调查，然后错误码查，然后 IP 查。 
。。。 2025-08-11 11:18:25 
它是分很多的维度的，然后为为了满足这些不同维度的高速的查询，它在上游进行了一些分分分表就是根据需求来进行不同的分表。比如说你想查活动的话，它就会根据活动进行聚合。如果你想查某一条链路的话，它就根据某一条链路进行聚合。然后如果你在查询的时候，它就会判断你的那个。 
。。。 2025-08-11 11:18:47 
那个查询的条件，然后获取他的那些请求，判断他是走活动力度，还是走那个请求走被调力度，然后来走到不同的表，然后来提升那个查询的速度，然后这是一个上游服务。 
。。。 2025-08-11 11:19:01 
然后这个监控告警服务的话，就是那个就是我刚刚说的，他就有各种告警配置配配置完了之后呢，他他会把那个配置信息通过卡夫卡给传到那个监控监控告警系统里，然后他就会根据最新的那个配置来一直循环它的那个上报的数据。 
。。。 2025-08-11 11:19:21 
如果上报的数据能满足它的那个配置呢，就产生告警，然后创建工单，然后他他可能他还有一些其他的那个模块，比如说这个。 
。。。 2025-08-11 11:19:32 
把恶意的说下好，这大概就是监控告警服务做了一些事情，就是检查数据，根据最新的配置检查数据，然后产生告警工单。 
。。。 2025-08-11 11:19:45 
公司企微等功能，然后工单分析的话是我自己搭搭的一个项目，它是就是因为我们有很多工单就是刚刚告警告警服务产生的，然后呢，它有一些是因为信息特别多，然后呢，基本上每次会有很多的。 
。。。 2025-08-11 11:20:04 
业务方过来找我们的团队，然后就是看一下为什么错误，然后因为有一些服务是我们内部的，比如说排行榜，我们内部的，他会就会找我们，其实我们，我们自己人员排查的话也是去看日志，然后来进行排查。 
。。。 2025-08-11 11:20:19 
然后我就自己搭了一个工单分析的这样一个功能，它就可以去获取日志，然后提取中间的那个 error 信息，然后提取完了之后呢，然后通过大模型进行评判进行分析，然后通过一些提前支持或者搭建，然后他可能大概知道这个错误可能是由哪个服务引起的，然然然然然后来做的。 
。。。 2025-08-11 11:20:38 
这就是第四个，然后第五个大规模数据处理，这个就是当时是我的 LD 让我去统计那个那140万行的 excel 的那个。 
。。。 2025-08-11 11:20:49 
近两年的一个礼包峰值就是每个礼包发放的那个数据是多少，然后排个序，当时的话数据量也比较大，所以就参考了那个 map reduce 的那个思想，然后就是首先对数据源数据进行切片。 
。。。 2025-08-11 11:21:01 
欺骗完之后呢，就是分了15个每一个最多十万行的一个文件，然后并发的来进行执行，然后也是完美的完成了任务，这个当时比较急。 
。。。 2025-08-11 11:21:14 
他周三给我的，我这下周一就交上去了，也是完完美的完成任务大概是这么多对 QQ 那我们就简单问一下，问一下。 
。。。 2025-08-11 11:21:25 
ok 然后然后第一个就是你在这个监控管理端开发过程中，如果你这里有提到说你有应用一些设计模式，比如说策略或者是责任链，然后对于对于这块的话那么简单，这样就是这块设计模式是怎么应用的话，也解决了什么问题。 
。。。 2025-08-11 11:21:42 
这个的话主要是数据兼容相关，它需要这个，因为因为他我我刚确实我发现他代码在代码中很多那些写死的那些非常那种，那种历史性的一些遗留问题，就就比如说他把某一个主调是，比如说是，假如说有一个 APP ID 是一，然后模块是一，他把这个主调呢会映射成27杠一之类的一些数据就是做了一些。 
。。。 2025-08-11 11:22:09 
非常恶心的兼容，然然后就是有很多这种对对对对硬编码的一些情况，然后他他其实有很多，而且就我作为一个刚去的人，我根本就不知道这些是什么。然后就是我大概看了一下它里边的一些硬编码的情况，然后当即分析了几个类，有一些是替换类，就是它会把一个准备调，然后切换成另外一个准备调。 
。。。 2025-08-11 11:22:31 
这是替换类，然后另外一个的话是那个过滤类，如果说有一个是模块是27，它会把它过滤掉，就可能是一些抛弃的服务，或者是其他的，他他是这么处理的，还有一些的话是比较灵活的一些逻辑，然后这就通过策略模式，我把它分成了三个策略，一个是就是第一个替换类，然后第二个的话就是那个。 
。。。 2025-08-11 11:22:52 
过滤，然后还有第三个的话就可以自定义策略，然后通过实现那个 process 的方法，然后它的方法，然后就是它在加载的时候会站在我的所有策略。然后根据策略的话，他在在建立数据的过程中会判断他的那个数据是否符合我的这个策略。如果符合我的策略的话，就走我这个策略的对应的执行方法，然后来是就原来是100多行的那个13代码会通过策略模式。 
。。。 2025-08-11 11:23:18 
解解解开之后就调了一下，然后直接一处理两两三行就解决了，然后大概是这这这样子，然后他通过那个策略也可以非常容易的进行扩展，因为我留了第三类是那个策略的一个那个。 
。。。 2025-08-11 11:23:32 
可能就是自定义策略的一个类型，它可以在那边实现，它的策略方法就非常容易后期进行扩展，大概是这这样的一个工作。然后除了这两个就设计模式，你还了解其他的设计模式吗？ 
。。。 2025-08-11 11:23:47 
工工厂模式，单例模式应该就是你要不简单讲一讲这个你了解的设计模式以及他们的情况。 
。。。 2025-08-11 11:23:58 
单首先就是单例模式吧，单例模式在 spring 框架中用的还是挺多的，因为有一些像 controller service 都是一些单例，就是在执行过程中把就创建一下就行了。我们把这个一般都是 spring 框架底层做的这些东西。 
。。。 2025-08-11 11:24:11 
就是他在那个注入，就是我们可能通过一些叉之前是通过叉，现在的话可能就是一些其他的方式来，当然不是，他是为了解决什么问题。 
。。。 2025-08-11 11:24:23 
就是解决那个对象呢，非常通用，就只创建一次，就就就在项目开始的时候创建一次，在避免后期频繁的创建。 
。。。 2025-08-11 11:24:34 
所以说有一个单例模式，这样一个概念，就是它就是在整个整个持续运行过程中，只有一份对。 
。。。 2025-08-11 11:24:45 
大概是这就是单例模式，然后像工厂模式的话，就是就像刚刚我说那个我们那个标注系统那个就是有不同的工厂，然后他就是在根据不同的任务来获取不同的那个处理方式。 
。。。 2025-08-11 11:25:00 
然后职职能链模式的话，就是它是一个整个执执行链，然后的话它不同的执行链和经常就和工厂模式进行搭配，然后执行它的每一个执行逻辑的话，就可以通过工厂来进行丰富，进行不同变变变，变得不同的处理逻辑，它就是一个。 
。。。 2025-08-11 11:25:15 
整体调用，然后如果说整个质量链走下来没有问题的话，那这个数据就我们可以认为它是符合我们，那就是经过处理之后的数据，要么是合法，要么是经历经过执行逻辑变成符合我们预期的一个样子。 
。。。 2025-08-11 11:25:28 
然后大大大概是这么多，然后就是你刚刚也提到，就是你在数据的话，你们做一些分表和分片，然后你是分片，还有一些方法是指按照数据量来做一切片是吧？ 
。。。 2025-08-11 11:25:45 
这边的话是根据业务来进行处理的，因为我们查询我们在管理端查询的时候，它是一个，它是一个可以，首先最上来就是可以根据活动查我，我我是我的业务，我只关注我的这个活动，所以我从活动来查，然后。 
。。。 2025-08-11 11:26:01 
那你这里又提到了，就是实现了大规大规模的高校统计，然后这块高校统计你这边是怎么支持的，这这一块其实是我在上层上层的做的，在管理端做的。 
。。。 2025-08-11 11:26:14 
管理端的话，那那一块其实就是那个，那个统计的话，那其实其实还是归归归归于统计服务，就是就是进行了一些数据聚合。 
。。。 2025-08-11 11:26:28 
也相当于在顶层的业务应用上，然后做了一些数据的一些简单技术是吧？差不多，然后它会根据，就假如说你查的是分钟维度的，它会落到分钟的一些表上。如果说你查的范围跨度比较大，它就会查时间的那个表，就是它会根据不同的情况来进行不同的处理。 
。。。 2025-08-11 11:26:51 
分到不同的表上。 
。。。 2025-08-11 11:26:57 
ok 然后下面你你填的就是那个大规模数据处理这里对，包括你有提到，你用了一些就是一些思想，然后具体流程是怎么样的。 
。。。 2025-08-11 11:27:09 
这个当时当时就是有人给了他，就给我甩了个 excel 我一打开发现140万这这肯定搞不了，我的电脑就直接卡死，所以说就先把它转转切分，先先把那个就先转成 CSV 的那个结构，然后 CSV 的话，然后就是首先把它切分，就是切成了15个每个最多十万的那。 
。。。 2025-08-11 11:27:30 
文件，然后就先跑一个文件是，然后我先去管理端看了一下有没有能够满足这个需求的，接口看了一下没有，然后就先去管理端先实现了一个。 
。。。 2025-08-11 11:27:41 
然后就开始测试，然后就是便利，就先读读这个文件，然后获取它的那个 ID 和业务业务代码，然后发请求获得数据。 
。。。 2025-08-11 11:27:55 
然后之后跑跑的时候就发现发现是有问题的，首先就是那个我们的那个那个 server 扛不住我们的 server 在在请求量非常低的时候，它的内存占用就已经达到了40%多，你稍微几个请求上去，它就马上到70%多就开始告警，然后马上就服务就挂掉。 
。。。 2025-08-11 11:28:15 
然后就是先进入那个 server 进行那个内存分析，就那用那个 PP 进行内存分析，然后我看了一下它的那个内存占用，然后它有一个放占了。 
。。。 2025-08-11 11:28:27 
九个多 G 的使用的内存，然后然后就就是我问了一下正式工，因为我也不知道那个玩意是什么，然后我就问了一下正式工这个玩意是啥，他们说是缓存了一些数据，然后我我然后我就说需不需要，我就想把先把它去掉，就是确认之后就先把它去掉，之后我们的内存占用就直接掉到3%。 
。。。 2025-08-11 11:28:44 
然后就我 server 端的问题就解决了，然后然后就是我们这边 client client 端的话，就我这边开始做之后发现由于并发问题呢，它经常会有一些错误的数据。 
。。。 2025-08-11 11:28:56 
就由于地方写，它会写在同一行，然后会导致数据的是不可用的，然后就需要新增一个过滤，然后还有一个判断是否是就是用来计算它是哪些处理，哪些没有处理。 
。。。 2025-08-11 11:29:09 
就是类似于多机流水线的那样一个功能吧，然后就是之前就是我十万条跑完其实只有889万是能用的，最后还需要有一万需要我后期再把它补录进去，然后再跑一下。 
。。。 2025-08-11 11:29:23 
然后，然后然后最后多不就是长大，我这有问题就是真实的就是140万行 excel 数据我理解，140万行的本机应该应应该应该直接能够处理完了。 
。。。 2025-08-11 11:29:38 
不不能，他跑的非常慢，因为因为因为我这边选有有一些问题，我选用的是 HTTP 的那个请求来做的，就是我没有办法，然后我服务都是部署在别别别的那个平台，因为我大厂不都这样，就是跑在别的平台上。 
。。。 2025-08-11 11:29:54 
然后就我理解一下，我理解就是相当于就是说你这里也在处理这个104万数据的时候，对面就需要去寻求一些 HTP 拿去这些数据，然后作为计算一下，对对对。 
。。。 2025-08-11 11:30:06 
如果如果说本地跑的话，确实会非常方便，但是它它由于是服务部署在比别的平台的时候，所以就不太不太好了，而且就算写文件的话，也需要去让别的，就对方组的负责人捞捞捞一下数据。 
。。。 2025-08-11 11:30:21 
到到时候我也比较那个吧，就是不太想麻烦别人，所以说就自己自己自己那个搞完就通过最慢的 GDP 来搞了，然后就慢慢慢是慢了一点，但是确实不需要麻烦任何就自己搞，搞完了。 
。。。 2025-08-11 11:30:36 
ok 然后你这里切片是直接按简单的条幅切片切片，对，就直接按条数切片，因为它这个不涉及到任何的其他的一些东西，我就我不需不需要把根据业务方案进行切切分，就只需要按那个数据来进行切分就行了，而且方便后续进行处理和统计。 
。。。 2025-08-11 11:30:55 
然后，然后，然后然后你实际之后主要是这两个项目吗？然后在这两个项目中，然后你有觉得哪些自己的碰到的有哪些难点，或者哪些做哪哪些做得好。 
。。。 2025-08-11 11:31:15 
我觉得数据标注系统这个按按按他做的，我觉得挺不错的，因为当时是我大部分其实也是让 AI 来实现，然后他那个他的那个血缘关系就是不同的 operator 来区分不同的血缘关系，这个是是 leader 的，然后当时也是让 AI 去做。 
。。。 2025-08-11 11:31:33 
然后最后他做的就是有一个血缘重放的这样一个操作，就是我在查询数据的时候，它会获取原始版本，然后还有一些操作版本。 
。。。 2025-08-11 11:31:44 
然后通过原始版本，然后来就是不同的操作来构建一个类似于那个执行图，就像那个 spark 的那个 da g1样构建这个图，然后开始重复操作。然后这样的话，它就能够查询任意版本的一个节点信息。 
。。。 2025-08-11 11:32:02 
他这个我我们我们这里有没有碰到一些难点，只有这两个项目里面难点，当时是比较卡的，然后我通过一些，然后给他。 
。。。 2025-08-11 11:32:16 
其实并没有，并没有卡的卡的特别多，因为因为现在我其实我说实话，我现在开发形式已经和之前不太一样了，我在腾讯这边的话，基本上每行代码都是手敲的。 
。。。 2025-08-11 11:32:29 
然后我在美团这边基本上95%的代码都是 AI 来作为协助，是对我现在我对 AI 的已经有了一个比较成熟的一个系统方案来支持企业级的开发。 
。。。 2025-08-11 11:32:42 
基本上遇到的难难点就是和 AI 进行沟通，如何让他明确你的需求，然后并完成找到对应的地方进行修改 ok 行。然后下面的话就是到了你具体的一些项目，比如说你这里有一个叫做。 
。。。 2025-08-11 11:32:58 
就是一个对，可以可以可以演示一下，可以看到这个地方吗？ 
。。。 2025-08-11 11:33:09 
可以可以，这这是我的下一个项目，它可以直接就是通过这种方式来进行，首先可以就是可以跑，因为这一些 API K 什么都是已经配置好了，就是直接就可以可以上手上手试了。 
。。。 2025-08-11 11:33:21 
就可以启动一些不同的不同的模式，有一些模式，我可能还有点问题，我需要后期再微调一下，但是它就是它已经可以支持一些功能，比如说我告诉他。 
。。。 2025-08-11 11:33:31 
查看当前目录的稳定就是他，他已经支持了一些现有脚本，然后我还可以自定义给它配置一些放或者支持一些 MCP，然后他就会进行询问，然后来判断是否执行这个工具。 
。。。 2025-08-11 11:33:47 
我们这边只需要给他一个 ES。 
。。。 2025-08-11 11:33:53 
然后他就可以获取到那个当前的一些所有的那个文件信息，这是简单的一个，其实 mcd 也是支持的，然后自自定义的话，你也可以实现，像其他的，比如说这边的扣子里面。 
。。。 2025-08-11 11:34:07 
像像这是这是基础的一些抽象，基础的工工工具的一些抽象的工具，结果工具的一些之类的抽象，然后你就可以通过就是进行实现，后，后续也是比较好扩展。 
。。。 2025-08-11 11:34:23 
不会，我们看看吧，我们就简单问一下问题好了，然后第一个就是这大概的时间逻辑也不简单介绍一下大概实现逻辑的话。 
。。。 2025-08-11 11:34:35 
最主要的就是，其实其实所有的最主要的核心，我觉得就是是执行的这一块，当然执行这一块只是其中的非常小的一块，就是一个不断的从用户拿到 carry，然后来构建一个上下文。 
。。。 2025-08-11 11:34:50 
然后来通过一些思考，然后确定执行步骤，然后工具调用，然后获得反馈，执行完之后获得反馈，然后来决定下一步操作这样一整个。 
。。。 2025-08-11 11:35:01 
代码也就是大概是这一块，然后然后这这所以就是我理解这里可能是因为会有一些做人的相同行为，然后对于这种多轮的用户行为的话，你这边对于一些公用的管理一直操作。 
。。。 2025-08-11 11:35:15 
多多轮到用户行为了吗？它它会都会缓存在这个 message 中，它会把当前的那个用户的一个放到 message 中，这作为了我们后期。 
。。。 2025-08-11 11:35:27 
直接放到了本地对吗？就是本地 catch 了一下，对对对 ok ，那我这里如果这里当用户量比较大的时候，你就。 
。。。 2025-08-11 11:35:38 
对本地不会有一些承受压力吗？量比较大的情况下，确确确确确确实可能会有后续的话，可能就是加一些其他的操作，判断它的这个缓存当过大的时候，就会把它进行一些持久化，因为我这个本身也是自带持久化的，就当用户用户完成一轮对话之后，退出之后呢，他我后台会让那个 AI 对我们这轮对话进行一个总结，然后入库。 
。。。 2025-08-11 11:36:04 
不是也不是入库吧，就是持久化到本地一个文件中，然后方便他后续再次打开的时候可以基于上一次的之前的一些信息进行提问，对高总，我这等会就是你。 
。。。 2025-08-11 11:36:16 
这个模型你是在本地拿那个模型来说，你就远远到了一些 open 的一些，我我我调用的是那个国际流动的，他们的 API 来来来做的。 
。。。 2025-08-11 11:36:27 
他们他们做了一层那个柚子，好把它复制到本地，对吧，对对对好，你好，然后然后后面你你你也提到就是说就是对于分层机管理，然后这里就是你你是如何把一些中短机跟团做一些什么的呢？ 
。。。 2025-08-11 11:36:46 
就是 memory 这一块可以看到这边是一个浪浪，就是长期的一个，然后这也是一个短期的一个，它主要就是会对轮次会有一个就达到一定轮次之后呢，它会把它弄弄成转化成一个长期，长期以后它就会放到那个 B 那。 
。。。 2025-08-11 11:37:03 
这个库中，然后后续的话你就可以通过 rug 来那个检索相相相应的那个内容，然后放到那个提示时钟，然后未给大冒险。 
。。。 2025-08-11 11:37:14 
ok 这期的话相当于就是用户去在做人交互的时候，然后近期的行为我们会放在第一种，然后当时的超过了预测的时候，我会把它数据放到就是正常记忆里面，对对对，然后然后后续的话就是放到那个，他结束这个话之后就放到那个，所以库里。 
。。。 2025-08-11 11:37:35 
ok 行，然后你这里也有提到那个走到一个线上数据库，然后然后然后刚刚提到就是是把成绩放在这个库里面，然后。 
。。。 2025-08-11 11:37:47 
你你的解答介绍就是你是怎么跟这个做一些交互的吗？在相关部做一些交互，就是怎么说呢？就是首先你确定一个模型，因为它主要存储就是向量，然后你在一个整个沟通完毕之后呢，它会进行那个对话的汇总，然后就会把那个进行 embedding 切入，然后调用那个 fast 的 API，然后进行存储就可以了。 
。。。 2025-08-11 11:38:13 
ok 比如说，当新当新一轮数据到来的时候，就是你先相当于就是先把就是短期的数据先要。 
。。。 2025-08-11 11:38:24 
我先拿到他的一半后再去长期长期低一些的那个上面会做一些检索，对吧，差差不多差不多对捞这块的话你有空买一些难点吗？ 
。。。 2025-08-11 11:38:41 
这块也是 AI 搭搭的难点，就是沟通我们的需求，然后然后在不断的 debug 的时候让他写明 test。 
。。。 2025-08-11 11:38:52 
唉，我是问问说你这个项目是本地自己就是本地做的一个 logo 项目，还是说因为我看你上面最上面那个美团世界里面不是有提到一个那个 AI 不是有吗？ 
。。。 2025-08-11 11:39:06 
和那个没有关系，这个就是我自己为了准备秋招，花了两天时间搭的一个项目，<笑声>不是比较诚实。 
。。。 2025-08-11 11:39:18 
ok 行，然后老项目这一块差不多，我们接下来就过一下八股吧，好吧。好，这一块的话就是我问一下那个计算机基础吧。ok 好，然后第一块的话，我先简单问一下排序相关的。ok 然后然后第一块呢，就是比如说我们现在有十个指数叫排序的话。 
。。。 2025-08-11 11:39:36 
然后一般是选择什么什么配色比较好一点，十个整数，赵副队长这边找就找出最大的那个。 
。。。 2025-08-11 11:39:48 
排序有很多，比如说快排堆排之类的。 
。。。 2025-08-11 11:39:56 
那那那得看需求有没有要求他那个是稳定的排序，还是说可以不稳定，或者说他只关注最大，还是说需要关注一个整体的。 
。。。 2025-08-11 11:40:08 
觉得走出去对吧，那么他写好就行，十个人数排序，那就那就那就快排。And you. 其实快排就是不，不管是在哪排序的话，其实它都会有一些适用的场景，比如说快排的话，一般就是通常数据场景的话，快排会比较 ok，但是比如说像一些的情况下，比如说。 
。。。 2025-08-11 11:40:35 
如果比如说举例子，比如像这种是就是纯纯递增或是递减的话，那么你就快返回地方比较严重，确实在这个需要考虑他那个。 
。。。 2025-08-11 11:40:47 
数据的一些情况就是小小规模数据场景的情况下，那那就快速，那个并不一定是最优的，然后是的是的是的。 
。。。 2025-08-11 11:40:57 
对，我这里给你提示，他并不是自由的，然后然后在这个前提下，你可以考虑一下，就是只用哪种，会会会会更好一点，那个那个那个选择排序就每一次选择那个最最合适的，然后放在这个地方。 
。。。 2025-08-11 11:41:14 
因为它大可能大概率就都已就已经有序了，就比较快。 ok 我现在说吧，其实像这种小动的场景的话，其实一般会选用一些，比如说像这种插入排序，对，然后这块其实你以后也可以去看一些已有的代码实现的，比如说 java 里面比如说一些做的，其实你会发现它内部会做一些优化。 
。。。 2025-08-11 11:41:39 
比如说他判断做的，它的范围比较小，比如说像十个到20位之内的话，它其实会给它优化成一些，比如说超数排序之类的学学习的，其实是这样，就是大数据规模比较小的情况下，然后其实快盘它并不并不仅仅是是最优的，对，因为它涉及到它的方式保护，其实会有一些成效。 
。。。 2025-08-11 11:42:04 
对，他们其实当你快买到这个长项，它其实比较大，是的，是的，应该是一些小规模式这样的一些排序。ok 然后这里我们进一步提一个进阶的，就比如说海量数据对，然后你需要在单机进行执行，但是它数量比较大，你你一次明确相当于，比如说我这里有11个整数。 
。。。 2025-08-11 11:42:29 
还是没有1G B 然后对于这种还是有问题，我们该怎么解决呢？这种一般是用堆堆排吧，这个配置放不下你这11个数字那个放不下了。 
。。。 2025-08-11 11:42:42 
我我不需要，就是它是需要所有的排序，就是你能够解决这个问题，就可以十十1个排期完，但是我们只有一 G B 内存，就是你。 
。。。 2025-08-11 11:42:56 
前提就是说我这个设计者说不能一次载到内存里面去，那那那那个那个那个那个好像叫外外部排序吧，对对，你的思路是对的，除了外环是的话。 
。。。 2025-08-11 11:43:08 
你能简单加，就是我这个里面大概应该往后好像这个有有有有点有点，但是好像还是就是把一部一部分的数据读读读进来之后进行排序，然后会把一些确定的数据给读到那个放到磁盘上，然后最后。 
。。。 2025-08-11 11:43:26 
再再进行处理，当时当时背当时背408的时候背过，现在现在太久有点忘记了，其实这个在我们大数据场景其实应该挺挺常见的。 
。。。 2025-08-11 11:43:38 
大大数据场景其实就是像你刚刚说的，整体思路是没问题，其实就是我们还有外排，对我一般的话，一般常见的做法就是可能就是我们把这个11个整体，然后我们先。 
。。。 2025-08-11 11:43:51 
先做一些切片，对吧，对对对，当时我们先做一切片，对，然后在企业内部做一些排序，然后最后我们有个定位，然后给他最后。 
。。。 2025-08-11 11:44:03 
并轨道就是。好，大概是这样的。 
。。。 2025-08-11 11:44:11 
然后行，那我这进进步的问题吧，就是比如说我们崩块切片之后，对，然后这里相当于就是我们。 
。。。 2025-08-11 11:44:25 
想变成之后，对于这块我们具体规避，我们该怎么做呢？ 
。。。 2025-08-11 11:44:30 
切完片之后的归病，就比如说我，我我先给你一个前提，就比如说我们已经，比如说把这个是一个，比如说我们已经切成了100片，然后每一片在什么上都是有序的，然后我们需要把这100片有序的顺理成一个整体有序的一个数据，然后对于这块的。 
。。。 2025-08-11 11:44:50 
回避我们该怎么做呢？我想一想。 
。。。 2025-08-11 11:44:56 
不一定。 
。。。 2025-08-11 11:45:05 
因因为因为在那个十个分片中已经是有序了，我们只需要这是把这十分的没有序的弄成一个，那就是完整的有序，这个我们该怎么做？ 
。。。 2025-08-11 11:45:18 
我觉得就是我们可以内存十个分片，我们内存就就放一个十个数组，然后十个数字，每一个放分片中的第一个就是他，他按按我们要求那个顺序的最最前面的那个，然后呢，这就是有一个顺序，然后这个顺序之后呢，把这一课就可以先那个入库，然后之后再进行处理下一批数据。 
。。。 2025-08-11 11:45:40 
下就是每一次都读，好像稍等，有点像那个赛马的那个问题，我想一下，是的，其实对这块的话，最常见的就是说我们可以用一些，比如说，比如说这种对角堆，就是说一些，你比如说一些半库，我们相当于我会一个。 
。。。 2025-08-11 11:46:03 
回顾一个数量结构，然后每次选一个小时就可以了，是的，然后现在我们在微信通系统的内容吧，然后第一个，比如说你简单介绍性能跟现场的关系。 
。。。 2025-08-11 11:46:15 
进程和线程进程，它的是那个资源分配的一个最小的单位，就是分配资源是以进程为力度，然后调度的话是以县城为力度的，然后由于进程呢，它调度调度起来呢，它经常会有一些上下文的切换，就比较影响比较影响效率，所以说就有线程来进行切换，然后线程之间的。 
。。。 2025-08-11 11:46:36 
可以共享一些资源，它切换起来的话，不不需要经历到内核态，它切换起来就比较快，然后效率也比较高，这大概就是他们的一个区别了吧。 
。。。 2025-08-11 11:46:48 
我看你提到的就是你有去掌握，比如说玩 java go python ，然后我们这里能买一些就是编程语言的一些基础。好 ok 你可以要不简单介绍一下那个 map 的实现吧。 
。。。 2025-08-11 11:47:03 
看看的还是卖并不安全的 map 吗？我好像这一块不不不，已经记不太清了，看的比较少。 
。。。 2025-08-11 11:47:16 
没有问题，然后你能解释出来就跟那个 link list 的区别吗？ar 的话，它底层是一个那个数组。然后 link list 的话它底层是一个就列表。 
。。。 2025-08-11 11:47:30 
就是它都都是有，都是用来存储一些 list 的信息的那种结构，只不过它对，比如说查询的话，你要的话就可以通过偏移来查，然后 link 的话就必须 node to node 的那种列表来查对。 
。。。 2025-08-11 11:47:46 
好，然后他们的各自的试用场景呢？各自适用场景就是如果说需要偏移，就能通过偏移直接获取数据的话，就会通过那个那个，如果说你需要在中间插入的话，就可以用那个。 
。。。 2025-08-11 11:48:00 
那个那个 link list 插入的话，列表插入比较快，好嘞也行，然后然后你这里也提到也有，也有用到一些技术组件，比如说 redis，然后这种对吧？ 
。。。 2025-08-11 11:48:15 
ok 行，然后你们简单介绍就是为什么它会这么快，用起来会这么快，他的那个是用那个的模型，就是它是一个单线程的处理的一个机制，它接收接收一个请求，然后处理，然后之后就进行下一个他没有并发的这样来做并发的话，它就会经常有一些上下文的切换，各种其他乱乱七八糟的就会影响。 
。。。 2025-08-11 11:48:38 
比较效率，然后他这边呢这这是第一个，然后另外一个它是在内存里面，所以说它比那些做磁盘的都都会快很多，它的查询起来效率都会快很多，然后它底层的话它数据结构也是有一些优化的，你比如说它它底层好像是 C 吧，然后 C 的话可能你求一个字符串长度的话就是需要便利，然后判断最后一个是不是那个那个那个杠铃，然后呢，他他那边的话就做了一些优化，他提前缓存了一些，然后他也可以。 
。。。 2025-08-11 11:49:04 
通过这样的操作，它也可以，就是他也允许它的字符串中存在这个杠零，这样一些情况，它数据结构也是有一些优化，所以说它整个加起来就会导致它效率比较快。 
。。。 2025-08-11 11:49:16 
ok 好，这里提到 mysql 对，然后对于业界常见的做法就是我们对一些，比如 mysql 的话，就是你直接把流量导到 mysql 库里面拿出，对吧？ 
。。。 2025-08-11 11:49:27 
你在哪购物吗？他在面上面加一层是的开始，然后来继续加速检查询，对，但是对于这块的话，通常会出现金缓存的问题，就比如说缓存穿越缓存技术方案和缓存，对，然后对于这些你有了解。 
。。。 2025-08-11 11:49:47 
有有一定的了解，我记得我当初背过，我先我先想一下哈，他那个首先就是反正查就是我查没有，然后我用落盘去查那个 mysql，然后这样的话我记得是通过那个可以用那个库。 
。。。 2025-08-11 11:50:03 
是什么正法缓存，缓存把缓存穿透穿透就是他去用户的请求打到了那个 mysql 上就直接穿过去了。 
。。。 2025-08-11 11:50:16 
还是说这个叫击穿我不是我，是我不是很确定他们的汉语名字，然后对他对于这几种情况的解决方案你有了解吗？像这个他，我现在先说第一个他是那个请求，那个打到了 mysql 上，好像就是用那个，一是可以缓存一个那个空数据，这样的话他就如果说他缓存那个就是他请求第一次查到了 mysql 然后 mysql 都没有，我们就可以。 
。。。 2025-08-11 11:50:43 
缓存它那个 K 是一个空数据，叫他第二次请求它缓存，它查出来之后发现是个空，它就不会走了 mysql 了。然后另外好像是用那个那个布隆过滤器来判断是否存在那个 K 在那个那个中也也加加强一层防护。 
。。。 2025-08-11 11:50:59 
然后这是这是第一个。然后第二个的话就是好像那个 K 过期的问题，然后就是导致他查的时候会那个查到那个 mysql 上。那这样的话就是加一个分布式锁，然后就只让一个，一个那个查询能够去查到我们的 mysql，然后其他的这些都全全部先用锁拦住，然后他把那个 redis 更新好了之后，其他的再重试，然后拿到 redis 中的数据就不会去查到我们的那个 mysql 上。 
。。。 2025-08-11 11:51:25 
然后第三个的话就是那个缓存雪崩，就是可能会突然会有大量的 redis 的 key 过期，这样的话就建议就是设置那个 redis key 设置成不同的时间，尽量不要让它一瞬间全部大量的失失效。 
。。。 2025-08-11 11:51:40 
大大大概我背背的就就就就这啥 ok 然后你现在就是你对就是用的比较多，对吧，然后然后经常会出现一些，比如说一些热点或数据的一些问题，包括这种地发生什么情况下会出现。 
。。。 2025-08-11 11:51:57 
这个是它分片设置的，不太好吧，可能就可能导致它的数据有倾斜 OK。I base the contact.  
。。。 2025-08-11 11:52:14 
就是在查询的时候过滤的时候，那个其实有有有，我记得好像有一个什么 bannery 什么的，还有一个是什么的。 
。。。 2025-08-11 11:52:31 
我我记得是有多种，然后我看你说对弗林斯有些了解，对吧，毕竟在刚开始学欧元。 
。。。 2025-08-11 11:52:43 
行，那那那那这段时间我就就不问了 ok 行，然后时间也差不多了，我们要不简单写写代码吧，好吧，我理一下。Ok. 然后 ok 你你直接在本地 ID 解吧，然后很简单，就是你你要用用用用用那个 java 就是 java 有两个线程去给我打印一个输出。 
。。。 2025-08-11 11:53:06 
这这是我的日记，不好意思。All right. 对，你可以用那个用一个对，换了以后我感觉应该是错的。 
。。。 2025-08-11 11:53:23 
就是两个县城有，有的不自由打击技术出来，我就直直接直接那个，他写那个累吗？我建议你就是觉得现在能够好起来了，尽量能够跑起来，我想想这个地方有没有。 
。。。 2025-08-11 11:53:41 
应该是能跑起来的，对，或者如果你觉得家务好就很简单，你写个汉字也可以，啤酒非常简单，就是这相当于就是。 
。。。 2025-08-11 11:53:55 
他不是自由去打印数字，但是打印的结果是递增的吗？我们最简单的就比如说打到零到零到100吧。 
。。。 2025-08-11 11:54:06 
然后就是。 
。。。 2025-08-11 11:54:21 
两个两个。两个现场打印100？老弟怎么打？ 
。。。 2025-08-11 11:54:37 
我想一想。下。 
。。。 2025-08-11 11:55:06 
应该要用一个信号量来控制，都是这一块，我不知道，刚写的话你这个报名能导进来，我想想我怎么？ 
。。。 2025-08-11 11:55:24 
对，我可以给你不用销量吧，因为 java 这本身就有一些简单的一些关键字，直接用锁吗？ 
。。。 2025-08-11 11:55:34 
对，就是最简单的话，因为你温透的比打个包也比较费劲吧，对我们就用一个空。 
。。。 2025-08-11 11:55:54 
就可以了，就是直接按那个 system。 
。。。 2025-08-11 11:56:07 
没有一个人是？ 
。。。 2025-08-11 11:56:18 
我说的你要你要搞黄？你们记住。 
。。。 2025-08-11 11:56:23 
主要是我现在电脑上 java 环境好像不太行，或者说牛拍摄也可以， python 的话应该就是解决了，应该会方便一点吧。 
。。。 2025-08-11 11:56:33 
python python 我想想， python 我好像不太会体现出来，但是说这个 java 体现实我也不是特别会对，相当于就是并发这块的话，就是今就是今年比较少是吧？ 
。。。 2025-08-11 11:56:45 
不也不是说经验比较少，主要就是不太会写他的东西，这个从思想上来说就是两个线程拿拿到锁的执行，然后再对这个变量进行加加操作就应该就可以了。 
。。。 2025-08-11 11:56:57 
然后这个变量的话，可能需要用关键字来确保他们的两个线程能够获取最新的那个数据，大概是这样一个思想，人类思想的话应该应该是没啥问题。 
。。。 2025-08-11 11:57:10 
主要是确实确实我来北韩这边，我真的很少敲代码了，我基本上95%的代码都是 ai 写的是吗？真的真的，我感觉这个很强大，我这个也很简单，说这一块我就可以以我这个这个 ai 的这个例子，因为这个 ai 我说实话，其实主要一天就差不多已经搭好了，对。 
。。。 2025-08-11 11:57:34 
这个的话，首先就是我们日常在开发中的话，首先会有一个产品会给出我们一个 PRD，就给出一个产品预期的我们的产品的一个交互，还有一些效果显示各种东西。 
。。。 2025-08-11 11:57:49 
然后这边的话，我在这边就是产品给出 PRD 之后，我会让 AI 先根据有一套提示词来生成一个那个 task，我找一下哈，应该就在这附近。 
。。。 2025-08-11 11:58:02 
我看你不是总结了一些方法论吗？你不是讲你帮我问这个就是我的方法论，就是首先有一套我们的总结的一个 prompt，然后这个 prompt 呢，就是可以根据用户的需求或者是产品的需求来生成一份详细的 PRD，就比如说这个 PRD 包括一些日期，时间，然后我们这个 PRD 我们这个产品到底是干的？ 
。。。 2025-08-11 11:58:26 
ok 我们的目标是什么？对对对，然后我们会有哪些人用我们的产品，然后他会希望我们的产品有哪些是功能，然后这就是我们的功能。然后我们其实作为程序员来说，我们最主要就是关注这一块。 
。。。 2025-08-11 11:58:39 
这就是我们实际当中需要用代码去实现的一些功能，然后像其他的其实都是一些非常，比如这些非常不需要特别的暂时关注，对。 
。。。 2025-08-11 11:58:50 
主要我们就是关注这个，然后第二步的话就是生成我们的 task，然后就是我们有总结的第二套的一个提示词，然后第二套提示词之后，你交互之后就会生成我们一个 task 的，比如说这个任务清单。 
。。。 2025-08-11 11:59:04 
然后就会涉及到我们的相关文件，然后有些注意事项，然后我们的任务今天我们要做哪些事情，我们每一些事情要干什么东西？ ok 然后这就是我们111些详细的流程，然后在执行的过程中。 
。。。 2025-08-11 11:59:16 
应该是一个开源的一个一个仓库，对吧，然后就是对对对对，而且，而且我认为这个开发范式一定会成为未来的一个主流。对，好嘞好嘞！ 
。。。 2025-08-11 11:59:29 
那今天是工作这一块，看看你还有没有什么问题，首先想问一下，就是面试过程中就是您觉得我有哪些地方还需要，就是加强，对，因为这是我秋招第一面，我个人感觉还是很紧张的。 
。。。 2025-08-11 11:59:48 
你你刚刚问的是不是一些一些就是电影点是吧，就是就是建议点对建议我接下来就是专注秋招的话需要做哪些准备？ 
。。。 2025-08-11 12:00:00 
然后的话，对对一些你的业务项目的一些这些进一步的一些原理，不不管是就是加一些理解吧，就是项目这一块。 
。。。 2025-08-11 12:00:15 
比如说你最快是三个，就是那个那个什么关系关，然后看看这个业务层面的一些，但是它对一些理论的原理。 
。。。 2025-08-11 12:00:30 
不要再强化一下它，它底层这一块，它底层这一块，其实具体是指哪一些事情，就比如说我刚刚说的就是比方说你比如说你可以 ok 我懂了，我懂了，我懂了，谢谢谢谢谢谢！ 
。。。 2025-08-11 12:00:51 
确实对于自己朋友的一些反应效益不行，好的好的好的，谢谢谢谢谢谢，好的好的，谢谢袁师傅！ 
。。。 2025-08-11 12:01:05 
问题吗。没有没有了。好了好了，谢谢师傅！拜拜拜拜。 
2025-08-11 12:01:27 主持人关闭实时转写 
